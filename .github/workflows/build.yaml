name: 'Build'

on:
  push:
    branches:
      - main
      - dev

  pull_request:
    branches:
      - main
      - dev

jobs:
  build-wireguard-go:
    runs-on: [self-hosted, macOS]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: WireGuard/wireguard-go
          ref: master
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Build wireguard-go binary
        run: make
      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: wireguard-go
          path: wireguard-go

  build:
    needs: build-wireguard-go
    strategy:
      fail-fast: false
      matrix:
        platform: [macOS, Linux]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - uses: actions/setup-node@v3
        with:
          node-version: '20'

      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-build-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-build-store-

      - name: Install deps
        run: pnpm install --frozen-lockfile
      - uses: dtolnay/rust-toolchain@stable
      - name: install linux deps
        if: matrix.platform == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev

      - name: Download wireguard-go binary
        if: matrix.platform == 'macOS'
        uses: actions/download-artifact@v3
        with:
          name: wireguard-go
          path: src-tauri/binaries/wireguard-go-x86_64-apple-darwin

      - name: Make wireguard-go binary executable
        if: matrix.platform == 'macOS'
        run: chmod +x src-tauri/binaries/wireguard-go-x86_64-apple-darwin

      - name: Build packages
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false

      - uses: actions/upload-artifact@v3
        if: matrix.platform == 'Linux'
        with:
          name: linux
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
          retention-days: 1

      - name: 'Tar files'
        if: matrix.platform == 'macOS'
        run: tar -cvf macos.tar src-tauri/target/release/bundle

      - name: Upload macOS artifacts
        if: matrix.platform == 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: macos.tar
          path: macos.tar
          retention-days: 1
