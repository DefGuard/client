name: 'Build app and create release'
on:
  push:
    branches:
      - '**'

jobs:
  build-wireguard-go:
    strategy:
      fail-fast: false
      matrix:
        architecture: [arm64, amd64]
    runs-on: [self-hosted, macOS]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: WireGuard/wireguard-go
          ref: master
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Build wireguard-go binary
        run: make
        env:
          GOOS: darwin
          GOARCH: ${{ matrix.architecture }}
      - name: Upload binary artifact arm64
        if: matrix.architecture == 'arm64'
        uses: actions/upload-artifact@v4
        with:
          name: wireguard-go-aarch64-apple-darwin
          path: wireguard-go
      - name: Upload binary artifact amd64
        if: matrix.architecture == 'amd64'
        uses: actions/upload-artifact@v4
        with:
          name: wireguard-go-x86_64-apple-darwin
          path: wireguard-go

  create-release:
    name: create-release
    runs-on: self-hosted
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create GitHub release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true

  build-macos:
    needs:
      - create-release
      - build-wireguard-go
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-apple-darwin, x86_64-apple-darwin]
    runs-on:
      - self-hosted
      - macOS
    env:
      APPLE_SIGNING_IDENTITY: 'Developer ID Application: defguard sp. z o.o. (82GZ7KN29J)'
      APPLE_ID: 'kamil@defguard.net'
      APPLE_TEAM_ID: '82GZ7KN29J'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Write release version
        run: |
          VERSION=$(echo ${GITHUB_REF_NAME#v} | cut -d '-' -f1)
          echo Version: $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-build-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-build-store-
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - uses: dtolnay/rust-toolchain@stable
      - name: Install protobuf compiler
        run: brew install protobuf
      - name: Install ARM target
        run: rustup target add aarch64-apple-darwin
      - name: Download wireguard-go binary
        uses: actions/download-artifact@v4
        with:
          name: wireguard-go-${{ matrix.target }}
          path: src-tauri/resources-macos/binaries/wireguard-go-${{ matrix.target }}
      - name: Unlock keychain
        run: security -v unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" /Users/admin/Library/Keychains/login.keychain
      - name: Import certificate to login keychain
        run: |
          echo "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k /Users/admin/Library/Keychains/login.keychain -P "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/pkgbuild -T /usr/bin/productbuild
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" /Users/admin/Library/Keychains/login.keychain
          rm certificate.p12
      - name: Build app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: ${{ env.APPLE_SIGNING_IDENTITY }}
          # Remove these certificate environment variables to prevent Tauri from creating its own keychain
          # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ env.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.NOTARYTOOL_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ env.APPLE_TEAM_ID }}
        with:
          args: --target ${{ matrix.target }} -v
      - name: Build installation package
        run: |
          bash build-macos-package.sh src-tauri/target/${{ matrix.target }} src-tauri/resources-macos/scripts ${{ env.APPLE_SIGNING_IDENTITY }} /Users/admin/Library/Keychains/login.keychain
          xcrun notarytool submit --wait --apple-id ${{ env.APPLE_ID }} --password ${{ secrets.NOTARYTOOL_APP_SPECIFIC_PASSWORD }} --team-id ${{ env.APPLE_TEAM_ID }} src-tauri/target/${{ matrix.target }}/product-signed/defguard.pkg
          xcrun stapler staple src-tauri/target/${{ matrix.target }}/product-signed/defguard.pkg
      - name: Upload installation package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: src-tauri/target/${{ matrix.target }}/product-signed/defguard.pkg
          asset_name: defguard-${{ matrix.target }}-${{ env.VERSION }}.pkg
          asset_content_type: application/octet-stream
