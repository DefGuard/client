[workspace]
members = ["cli", "common"]
default-members = [".", "cli"]

[workspace.dependencies]
clap = { version = "4.5", features = ["cargo", "derive", "env"] }
defguard_wireguard_rs = { git = "https://github.com/DefGuard/wireguard-rs", rev = "42d478b980cb3f7549f20f2f492c896a7389a79d" }
dirs-next = "2.0"
prost = "0.14"
reqwest = { version = "0.12", features = ["cookies", "json"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
thiserror = "2.0"
tokio = { version = "1", features = ["macros", "rt-multi-thread", "signal"] }
tonic = { version = "0.14", default-features = false, features = [
    "codegen",
    "gzip",
    "router",
    "tls-native-roots",
    "tls-ring",
    "transport",
] }
tonic-prost = "0.14"
tonic-prost-build = "0.14"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }

[workspace.package]
authors = ["Defguard"]
edition = "2021"
homepage = "https://github.com/DefGuard/client"
license-file = "../LICENSE.md"
rust-version = "1.80"
version = "1.5.2"

[package]
name = "defguard-client"
description = "Defguard desktop client"
repository = "https://github.com/DefGuard/client"
default-run = "defguard-client"
authors.workspace = true
edition.workspace = true
homepage.workspace = true
license-file.workspace = true
rust-version.workspace = true
version.workspace = true

[build-dependencies]
tauri-build = { version = "2", features = [] }
tonic-prost-build.workspace = true
vergen-git2 = { version = "1.0", features = ["build"] }

[dependencies]
anyhow = "1.0"
base64 = "0.22"
clap.workspace = true
chrono = { version = "0.4", features = ["serde"] }
common = { path = "common" }
dark-light = "2.0"
defguard_wireguard_rs = { workspace = true, features = ["check_dependencies"] }
dirs-next.workspace = true
log = { version = "0.4", features = ["serde"] }
prost.workspace = true
regex = "1.11"
reqwest.workspace = true
# 0.21.2 causes config parsing errors
rust-ini = "=0.21.1"
semver = "1.0"
serde.workspace = true
serde_json.workspace = true
serde_with = "3.11"
sqlx = { version = "0.8", features = [
    "chrono",
    "sqlite",
    "runtime-tokio",
    "uuid",
    "macros",
] }
struct-patch = "0.10"
strum = { version = "0.27", features = ["derive"] }
tauri = { version = "2", features = [
    "native-tls-vendored",
    "image-png",
    "tray-icon",
] }
# Must match Tauri plugins in package.json.
tauri-plugin-clipboard-manager = "2"
tauri-plugin-deep-link = "2"
tauri-plugin-dialog = "2"
tauri-plugin-fs = "2"
tauri-plugin-http = { version = "2", features = ["unsafe-headers"] }
tauri-plugin-log = "2"
tauri-plugin-notification = "2"
tauri-plugin-opener = "2"
tauri-plugin-os = "2"
tauri-plugin-single-instance = { version = "2", features = ["deep-link"] }
tauri-plugin-window-state = "2"
thiserror.workspace = true
time = { version = "0.3", features = ["formatting", "macros"] }
tokio.workspace = true
tokio-util = "0.7"
tonic.workspace = true
tonic-prost.workspace = true
tracing.workspace = true
tracing-appender = "0.2"
tracing-subscriber.workspace = true
webbrowser = "1.0"
x25519-dalek = { version = "2", features = [
    "getrandom",
    "serde",
    "static_secrets",
] }

[target.'cfg(target_os = "macos")'.dependencies]
swift-rs = "1.0"

[target.'cfg(target_os = "macos")'.build-dependencies]
swift-rs = { version = "1.0", features = ["build"] }

[target.'cfg(unix)'.dependencies]
hyper-util = "0.1"
nix = { version = "0.30.1", features = ["user", "fs"] }
tokio-stream = "0.1"
tower = "0.5"

[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3", features = ["winsvc", "winerror"] }
windows-service = "0.7"

[features]
# this feature is used for production builds or when `devPath` points to the filesystem and the built-in dev server is disabled.
# If you use cargo directly instead of tauri's cli you can use this feature flag to switch between tauri's `dev` and `build` modes.
# DO NOT REMOVE!!
custom-protocol = ["tauri/custom-protocol"]

[dev-dependencies]
tokio = { version = "1", features = ["full"] }

[profile.release]
codegen-units = 1
lto = "thin"
panic = "abort"
strip = true
