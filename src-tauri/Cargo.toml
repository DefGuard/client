[workspace]
members = ["cli", "common"]
default-members = [".", "cli"]

[workspace.dependencies]
defguard_wireguard_rs = { git = "https://github.com/DefGuard/wireguard-rs.git", rev = "v0.7.4" }

[workspace.package]
authors = ["Defguard"]
edition = "2021"
homepage = "https://github.com/DefGuard/client"
license-file = "../LICENSE.md"
rust-version = "1.80"
version = "1.5.0"

[package]
name = "defguard-client"
description = "Defguard desktop client"
repository = "https://github.com/DefGuard/client"
default-run = "defguard-client"
authors.workspace = true
edition.workspace = true
homepage.workspace = true
license-file.workspace = true
rust-version.workspace = true
version.workspace = true

[build-dependencies]
tauri-build = { version = "1.5", features = [] }
tonic-build = { version = "0.12" }
prost-build = { version = "0.13" }
vergen-git2 = { version = "1.0", features = ["build"] }

[dependencies]
anyhow = "1.0"
base64 = "0.22"
clap = { version = "4.5", features = ["cargo", "derive", "env"] }
chrono = { version = "0.4", features = ["serde"] }
common = { path = "common" }
dark-light = "2.0"
defguard_wireguard_rs = { workspace = true, features = ["check_dependencies"] }
dirs-next = "2.0"
log = { version = "0.4", features = ["serde"] }
prost = "0.13"
regex = "1.11"
reqwest = { version = "0.12", features = ["cookies", "json"] }
# 0.21.2 causes config parsing errors
rust-ini = "=0.21.1"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_with = "3.11"
sqlx = { version = "0.8", features = [
  "chrono",
  "sqlite",
  "runtime-tokio",
  "uuid",
  "macros",
] }
struct-patch = "0.9"
strum = { version = "0.27", features = ["derive"] }
tauri = { version = "1.8", features = [
  "notification-all",
  "dialog-all",
  "clipboard-all",
  "http-all",
  "window-all",
  "system-tray",
  "native-tls-vendored",
  "icon-png",
  "fs-all",
] }
tauri-plugin-single-instance = { git = "https://github.com/tauri-apps/plugins-workspace", branch = "v1" }
tauri-plugin-log = { git = "https://github.com/tauri-apps/plugins-workspace", branch = "v1" }
tauri-plugin-window-state = { git = "https://github.com/tauri-apps/plugins-workspace", branch = "v1" }
thiserror = "2.0"
time = { version = "0.3", features = ["formatting", "macros"] }
tokio = { version = "1", features = ["macros", "rt-multi-thread", "signal"] }
tokio-util = "0.7"
tonic = "0.12"
tracing = "0.1"
tracing-appender = "0.2"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }
webbrowser = "1.0"
x25519-dalek = { version = "2", features = [
  "getrandom",
  "serde",
  "static_secrets",
] }

[target.'cfg(unix)'.dependencies]
tokio-stream = "0.1"
tower = "0.5"
hyper-util = "0.1"

[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3", features = ["winsvc", "winerror"] }
windows-service = "0.7"

[features]
# this feature is used for production builds or when `devPath` points to the filesystem and the built-in dev server is disabled.
# If you use cargo directly instead of tauri's cli you can use this feature flag to switch between tauri's `dev` and `build` modes.
# DO NOT REMOVE!!
custom-protocol = ["tauri/custom-protocol"]

[dev-dependencies]
tokio = { version = "1", features = ["full"] }

[profile.release]
codegen-units = 1
lto = "thin"
panic = "abort"
strip = true
